{"version":3,"sources":["App.js","placeholder.js","serviceWorker.js","index.js"],"names":["Editor","markdownText","handleChange","handleReset","handleParse","className","type","onClick","onChange","htmlFor","name","id","defaultChecked","value","spellCheck","Previewer","outputText","htmlParse","isEscape","isSkip","source","escapeHtml","skipHtml","linkTarget","plugins","breaks","App","useState","text","setText","setHtmlParse","e","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAOMA,EAAS,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,aAAcC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YACzD,OACE,yBAAKC,UAAU,UACb,4BAAQC,KAAK,SAASD,UAAU,eAAeE,QAASJ,GAAxD,SAGA,0BAAME,UAAU,aAAaG,SAAUJ,GACrC,6BACE,2BAAOK,QAAQ,OAAf,MAEE,2BAAOH,KAAK,QAAQI,KAAK,QAAQC,GAAG,MAAMC,gBAAc,MAG5D,6BACE,2BAAOH,QAAQ,UAAf,SAEE,2BAAOH,KAAK,QAAQI,KAAK,QAAQC,GAAG,aAGxC,6BACE,2BAAOF,QAAQ,QAAf,OAEE,2BAAOH,KAAK,QAAQI,KAAK,QAAQC,GAAG,YAI1C,8BACEA,GAAG,SACHE,MAAOZ,EACPO,SAAUN,EACVY,WAAW,YAKbC,EAAY,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UACvBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OAClB,OACE,yBAAKd,UAAU,YAAYM,GAAG,WAC5B,kBAAC,IAAD,CACES,OAAQJ,EACRK,WAAYH,EACZI,SAAUH,EACVI,WAAW,SACXC,QAASC,QAyCFC,MAnCf,WAAgB,IAAD,EACWC,mBC1DT,kyCDyDF,mBACNC,EADM,KACAC,EADA,OAEqBF,mBAAS,CACzCT,UAAU,EACVC,QAAQ,IAJG,mBAENF,EAFM,KAEKa,EAFL,KAsBb,OACE,yBAAKzB,UAAU,iBACb,kBAAC,EAAD,CACEJ,aAAc2B,EACd1B,aApBe,SAAA6B,GAAM,IACjBlB,EAAUkB,EAAEC,OAAZnB,MACRgB,EAAQhB,IAmBJV,YAPc,kBAAM0B,EAAQ,KAQ5BzB,YAlBc,SAAA2B,GAAM,IAChBpB,EAAOoB,EAAEC,OAATrB,GACG,WAAPA,GAAiBmB,EAAa,CAAEZ,UAAU,IACnC,SAAPP,GAAemB,EAAa,CAAEX,QAAQ,IAC/B,QAAPR,GACFmB,EAAa,CACXZ,UAAU,EACVC,QAAQ,OAaV,kBAAC,EAAD,CAAWH,WAAYY,EAAMX,UAAWA,ME3E1BgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9864bdee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown/';\nimport breaks from 'remark-breaks';\nimport Proptypes, { string } from 'prop-types';\nimport PLACEHOLDER from './placeholder';\n\nconst Editor = ({ markdownText, handleChange, handleReset, handleParse }) => {\n  return (\n    <div className=\"editor\">\n      <button type=\"button\" className=\"clear-button\" onClick={handleReset}>\n        Clear\n      </button>\n      <form className=\"radio-form\" onChange={handleParse}>\n        <div>\n          <label htmlFor=\"raw\">\n            Raw\n            <input type=\"radio\" name=\"parse\" id=\"raw\" defaultChecked />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"escape\">\n            Escape\n            <input type=\"radio\" name=\"parse\" id=\"escape\" />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"skip\">\n            skip\n            <input type=\"radio\" name=\"parse\" id=\"skip\" />\n          </label>\n        </div>\n      </form>\n      <textarea\n        id=\"editor\"\n        value={markdownText}\n        onChange={handleChange}\n        spellCheck=\"false\"\n      />\n    </div>\n  );\n};\nconst Previewer = ({ outputText, htmlParse }) => {\n  const { isEscape, isSkip } = htmlParse;\n  return (\n    <div className=\"previewer\" id=\"preview\">\n      <ReactMarkdown\n        source={outputText}\n        escapeHtml={isEscape}\n        skipHtml={isSkip}\n        linkTarget=\"_blank\"\n        plugins={breaks}\n      />\n    </div>\n  );\n};\n\nfunction App() {\n  const [text, setText] = useState(PLACEHOLDER);\n  const [htmlParse, setHtmlParse] = useState({\n    isEscape: true,\n    isSkip: false,\n  });\n  const handleChange = e => {\n    const { value } = e.target;\n    setText(value);\n  };\n  const handleParse = e => {\n    const { id } = e.target;\n    if (id === 'escape') setHtmlParse({ isEscape: false });\n    if (id === 'skip') setHtmlParse({ isSkip: true });\n    if (id === 'raw')\n      setHtmlParse({\n        isEscape: true,\n        isSkip: false,\n      });\n  };\n  const handleReset = () => setText('');\n\n  return (\n    <div className=\"app-container\">\n      <Editor\n        markdownText={text}\n        handleChange={handleChange}\n        handleReset={handleReset}\n        handleParse={handleParse}\n      />\n      <Previewer outputText={text} htmlParse={htmlParse} />\n    </div>\n  );\n}\n\nexport default App;\n\nPreviewer.propTypes = {\n  outputText: Proptypes.string.isRequired,\n  htmlParse: Proptypes.objectOf.isRequired,\n};\n\nEditor.propTypes = {\n  markdownText: Proptypes.string.isRequired,\n  handleChange: Proptypes.func.isRequired,\n  handleReset: Proptypes.func.isRequired,\n  handleParse: Proptypes.func.isRequired,\n};\n","const PLACEHOLDER = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n## HTML block below\n\n<blockquote>\n  This blockquote will change based on the HTML settings above.\n</blockquote>\n\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default PLACEHOLDER;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}